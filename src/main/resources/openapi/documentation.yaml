openapi: "3.0.3"
info:
  title: "Multimedia Tours API"
  description: "Multimedia Tours API"
  version: "1.0.0"
paths:
  /multimedia-objects:
    post:
      summary: Create a new multimediaObject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultimediaObjectRequest'
      responses:
        '201':
          description: MultimediaObject created successfully
        '400':
          description: Bad request
      tags:
        - Multimedia Objects
    get:
      summary: Retrieve all MultimediaObjects
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultimediaObjectResponseList'
        '404':
          description: MultimediaObjects not found
      tags:
        - Multimedia Objects
  /multimedia-objects/{id}:
    get:
      summary: Retrieve a MultimediaObject by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultimediaObjectResponse'
        '404':
          description: MultimediaObject not found
      tags:
        - Multimedia Objects
    delete:
      summary: Delete MultimediaObject by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: MultimediaObject deleted successfully
        '400':
          description: Bad request
        '404':
          description: MultimediaObject not found
      tags:
        - Multimedia Objects
    put:
      summary: Update MultimediaObject by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultimediaObjectRequest'
      responses:
        '200':
          description: MultimediaObject updated successfully
        '400':
          description: Bad request
        '404':
          description: MultimediaObject not found
      tags:
        - Multimedia Objects
  /multimedia-objects/upload/{id}:
    post:
      summary: Upload a new Object
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Object uploaded successfully
        '400':
          description: Bad request
      tags:
        - Files
  /multimedia-objects/file/{id}:
    get:
      summary: Get MultimediaObject Object by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            image/png:
              schema:
                type: string
                format: binary
            video/mp4:
              schema:
                type: string
                format: binary
            audio/mp3:
              schema:
                type: string
                format: binary
        '404':
          description: MultimediaObject not found
      tags:
        - Files

  /tours:
    post:
      summary: Create a new tour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourRequest'
      responses:
        '201':
          description: Tour created successfully
        '400':
          description: Bad request
      tags:
        - Tours
    get:
      summary: Retrieve all Tours
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourResponseList'
        '404':
          description: Tours not found
      tags:
        - Tours
  /tours/{id}:
    get:
      summary: Retrieve a Tour by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourResponse'
        '404':
          description: Tour not found
      tags:
        - Tours
    delete:
      summary: Delete Tour by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tour deleted successfully
        '400':
          description: Bad request
        '404':
          description: Tour not found
      tags:
        - Tours
    put:
      summary: Update Tour by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourRequest'
      responses:
        '200':
          description: Tour updated successfully
        '400':
          description: Bad request
        '404':
          description: Tour not found
      tags:
        - Tours
  /tours/generate:
    post:
      summary: Generate a new tour
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
      responses:
        '201':
          description: Tour generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourResponse'
        '400':
          description: Bad request
      tags:
        - Tours
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
      tags:
        - Users
    get:
      summary: Retrieve all Users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseList'
        '404':
          description: Users not found
      tags:
        - Users
  /users/{id}:
    get:
      summary: Retrieve a User by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
      tags:
        - Users
    delete:
      summary: Delete User by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad request
        '404':
          description: User not found
      tags:
        - Users
    put:
      summary: Update User by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '404':
          description: User not found
      tags:
        - Users

components:
  schemas:
    MultimediaObject:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [ IMAGE, VIDEO, TEXT, AUDIO, MULTIDIMENSIONAL ]
        data:
          type: string
        title:
          type: string
        date:
          type: string
        tags:
          type: array
          items:
            type: string
        source:
          type: string
        position:
          $ref: '#/components/schemas/MultimediaObjectPosition'
        author:
          type: string
      required:
        - id
        - type
        - data

    MultimediaObjectPosition:
      type: object
      properties:
        lat:
          type: number
          format: double
        lng:
          type: number
          format: double
        bearing:
          type: integer
          format: int32
        yaw:
          type: number
          format: float
      required:
        - lat
        - lng

    MultimediaObjectRequest:
      type: object
      properties:
        type:
          type: string
          enum: [ IMAGE, VIDEO, TEXT, AUDIO, MULTIDIMENSIONAL ]
        title:
          type: string
        date:
          type: string
        source:
          type: string
        tags:
          type: array
          items:
            type: string
        position:
          $ref: '#/components/schemas/MultimediaObjectPosition'
        data:
          type: string
        author:
          type: string
      required:
        - id
        - type
        - data

    MultimediaObjectResponseList:
      type: array
      items:
        $ref: '#/components/schemas/MultimediaObjectResponse'

    MultimediaObjectResponse:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [ IMAGE, VIDEO, TEXT, AUDIO, MULTIDIMENSIONAL ]
        data:
          type: string
        title:
          type: string
        date:
          type: string
        source:
          type: string
        position:
          $ref: '#/components/schemas/MultimediaObjectPosition'
        author:
          type: string
        tags:
          type: array
          items:
            type: string

    Tour:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        source:
          type: string
        multimediaObjects:
          type: array
          items:
            type: string
        author:
          type: string
        generated:
          type: boolean
        tags:
          type: array
          items:
            type: string

      required:
        - id
        - title
        - multimediaObjects

    TourRequest:
      type: object
      properties:
        title:
          type: string
        source:
          type: string
        multimediaObjects:
          type: array
          items:
            type: string
        author:
          type: string
        tags:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - multimediaObjects

    GenerateRequest:
      type: object
      properties:
        searchQuery:
          type: string
      required:
        - searchQuery

    TourResponseList:
      type: array
      items:
        $ref: '#/components/schemas/TourResponse'

    TourResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        source:
          type: string
        multimediaObjects:
          type: array
          items:
            type: string
        author:
          type: string
        generated:
          type: boolean
        tags:
          type: array
          items:
            type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    LogoutRequest:
      type: object
      properties:
        id:
          type: string
      required:
        - id

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        lastLogin:
          type: string
        activeSessions:
          type: array
          items:
            $ref: '#/components/schemas/UserSession'
        role:
          type: string
      required:
        - id
        - email
        - password

    UserRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        lastLogin:
          type: string
        activeSessions:
          type: array
          items:
            $ref: '#/components/schemas/UserSession'
        role:
          type: string
      required:
        - email
        - password

    UserResponseList:
      type: array
      items:
        $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        password:
          type: string
        lastLogin:
          type: string
        activeSessions:
          type: array
          items:
            $ref: '#/components/schemas/UserSessionResponse'
        role:
          type: string

    UserSession:
      type: object
      properties:
        token:
          type: string
        CSRF:
          type: string
        validTo:
          type: string

    UserSessionResponse:
      type: object
      properties:
        token:
          type: string
        CSRF:
          type: string
        validTo:
          type: string